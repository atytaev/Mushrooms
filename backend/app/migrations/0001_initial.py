# Generated by Django 5.2 on 2025-05-23 12:34

import app.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiameterMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_photos', models.FileField(blank=True, null=True, upload_to='zips/diameter')),
            ],
        ),
        migrations.CreateModel(
            name='Scale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=100, verbose_name='Модель весов')),
                ('serial_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Заводской номер весов')),
                ('calibration_date', models.DateField(blank=True, null=True, verbose_name='Дата поверки весов')),
            ],
        ),
        migrations.CreateModel(
            name='Thermometer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info', models.CharField(max_length=255, verbose_name='Информация о термометре')),
                ('serial', models.CharField(blank=True, max_length=100, null=True, verbose_name='Индентификационный номер термометра')),
                ('calibration_date', models.DateField(blank=True, null=True, verbose_name='Дата поверки термометра')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('inspector', 'Инспектор'), ('manager', 'Менеджер'), ('admin', 'Администратор')], max_length=20, verbose_name='Роль')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DiameterMeasurementPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=app.models.inspection_photo_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('diameter_measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='app.diametermeasurement')),
            ],
        ),
        migrations.CreateModel(
            name='Inspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspection_date', models.DateField(verbose_name='Дата инспекции')),
                ('job_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Номер работы')),
                ('inspector', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='inspections', to=settings.AUTH_USER_MODEL, verbose_name='Инспектор')),
            ],
        ),
        migrations.AddField(
            model_name='diametermeasurement',
            name='inspection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diameter_measurements', to='app.inspection'),
        ),
        migrations.CreateModel(
            name='MushroomStorage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_of_boxes', models.IntegerField(verbose_name='Количество ящиков')),
                ('quantity_of_pallets', models.IntegerField(verbose_name='Количество поддонов')),
                ('temperature_in_fridge', models.FloatField(verbose_name='Температура в холодильнике')),
                ('mushroom_temperature_min', models.FloatField(verbose_name='Мин. температура гриба')),
                ('mushroom_temperature_max', models.FloatField(verbose_name='Макс. температура гриба')),
                ('invoice_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Номер счета-фактуры')),
                ('zip_photos', models.FileField(blank=True, null=True, upload_to='zips/placement', verbose_name='ZIP с фото размещения')),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mushroom_storage', to='app.inspection')),
                ('thermometer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='app.thermometer')),
            ],
        ),
        migrations.CreateModel(
            name='MushroomPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=app.models.inspection_photo_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='app.mushroomstorage')),
            ],
        ),
        migrations.CreateModel(
            name='Pallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_photos', models.FileField(blank=True, null=True, upload_to='zips/pallets')),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pallets', to='app.inspection')),
            ],
        ),
        migrations.CreateModel(
            name='PalletPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=app.models.inspection_photo_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('pallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='app.pallet')),
            ],
        ),
        migrations.CreateModel(
            name='ProductLoading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mushroom_temperature', models.FloatField(verbose_name='Температура гриба, °C')),
                ('car_number', models.CharField(max_length=20, verbose_name='Номер машины')),
                ('refrigerator_number', models.CharField(max_length=20, verbose_name='Авторефрижератор')),
                ('seal_number', models.CharField(max_length=50, verbose_name='Пломба SGS')),
                ('transport_temperature', models.FloatField(verbose_name='Температура транспортировки, °C')),
                ('zip_photos', models.FileField(blank=True, null=True, upload_to='zips/loading')),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_loading', to='app.inspection')),
                ('thermometer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='app.thermometer')),
            ],
        ),
        migrations.CreateModel(
            name='ProductLoadingPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=app.models.inspection_photo_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('loading', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='app.productloading')),
            ],
        ),
        migrations.CreateModel(
            name='ProductMarkingPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=app.models.inspection_photo_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marking_photos', to='app.inspection')),
            ],
        ),
        migrations.CreateModel(
            name='ProductMarkingZip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_photos', models.FileField(upload_to='zips/marking', verbose_name='ZIP с фото маркировки')),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marking_zips', to='app.inspection')),
            ],
        ),
        migrations.CreateModel(
            name='QualityInspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_photos', models.FileField(blank=True, null=True, upload_to='zips/quality')),
                ('sample_mass_kg', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='Масса объединённой пробы, кг')),
                ('conforms_to_declared_grade', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='Соответствие заявленному сорту, кг')),
                ('off_grade_mass_kg_50', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='Масса несоответствующих по калибру грибов 50, кг')),
                ('off_grade_mass_kg_70', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='Масса несоответствующих по калибру грибов 70, кг')),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_inspections', to='app.inspection')),
            ],
        ),
        migrations.CreateModel(
            name='QualityInspectionPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=app.models.inspection_photo_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('quality_inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='app.qualityinspection')),
            ],
        ),
        migrations.CreateModel(
            name='QuantityInspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zip_photos', models.FileField(blank=True, null=True, upload_to='zips/quantity')),
                ('inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quantity_inspections', to='app.inspection')),
                ('scale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='app.scale')),
            ],
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('net_weight', models.FloatField(verbose_name='Вес брутто с поддоном, кг')),
                ('defect_weight', models.FloatField(verbose_name='Вес поддона, кг')),
                ('quantity_inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boxes', to='app.quantityinspection')),
            ],
        ),
        migrations.CreateModel(
            name='QuantityInspectionPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=app.models.inspection_photo_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('quantity_inspection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='app.quantityinspection')),
            ],
        ),
    ]
